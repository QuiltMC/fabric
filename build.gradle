buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.315'
	}
}

plugins {
	id "java-library"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "org.quiltmc.loom" version "1.2.+" apply false
	id "org.quiltmc.gradle.licenser" version "2.0.+"
	id "net.kyori.indra.git" version "3.1.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.8.0"
	id "me.modmuss50.remotesign" version "0.4.0" apply false
	id "io.github.p03w.machete" version "2.0.1"
}

def ENV = System.getenv()
def signingEnabled = ENV.SIGNING_SERVER

version = "$project.version+${ENV.GITHUB_RUN_NUMBER ? '' : 'local-'}$project.upstream_version-${getBranch()}${ENV.SNAPSHOTS_URL ? '-SNAPSHOT' : ''}"
logger.lifecycle("Building Quilted Fabric API: $version")


import net.fabricmc.loom.util.gradle.SourceSetHelper
import groovy.json.JsonSlurper

def getQslModule(String library, String module) {
	return "org.quiltmc.qsl.$library:$module:$project.qsl_version"
}

def getSubprojectVersion(project) {
	return version
}

// Same as above, but for QMJ provides and unported modules
def getSubprojectUpstreamVersion(project) {
	def version = project.properties["$project.name-version"]

	if (!version) {
		throw new NullPointerException("Could not find upstream version for $project.name")
	}

	return version
}

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf('/') + 1)
	}

	if (!indraGit.isPresent()) {
		return 'unknown'
	}

	def branch = indraGit.branchName()
	return branch.substring(branch.lastIndexOf('/') + 1)
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
	def clientOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.client.output }

	project.dependencies {
		deps.each {
			api it
		}

		clientOutputs.each {
			clientImplementation it
		}
	}

	// As we manually handle the maven artifacts, we need to also manually specify the deps.
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

def testDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
	def clientOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.client.output }

	project.dependencies {
		deps.each {
			testmodImplementation it
		}

		clientOutputs.each {
			testmodClientImplementation it
		}
	}
}

allprojects {
	group = "org.quiltmc.quilted-fabric-api"

	apply plugin: "maven-publish"
	apply plugin: "me.modmuss50.remotesign"

	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}

	if (signingEnabled) {
		remoteSign {
			requestUrl = ENV.SIGNING_SERVER
			pgpAuthKey = ENV.SIGNING_PGP_KEY
			jarAuthKey = ENV.SIGNING_JAR_KEY

			afterEvaluate {
				// PGP sign all maven publications.
				sign publishing.publications.mavenJava
			}
		}
	}

	publishing {
		setupRepositories(repositories)
	}

	if (it.name == "deprecated") {
		return
	}

	apply plugin: "java-library"
	apply plugin: "checkstyle"
	apply plugin: "org.quiltmc.loom"
	apply plugin: "org.quiltmc.gradle.licenser"

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 17
	}

	java {
		// Must be added before the split source sets are setup.
		withSourcesJar()
	}

	loom {
		splitEnvironmentSourceSets()
	}

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}

		testmodClient {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
			compileClasspath += client.compileClasspath
			runtimeClasspath += client.runtimeClasspath

			compileClasspath += testmod.compileClasspath
			runtimeClasspath += testmod.runtimeClasspath
		}

		test {
			compileClasspath += testmodClient.compileClasspath
			runtimeClasspath += testmodClient.runtimeClasspath
		}
	}

	loom {
		runtimeOnlyLog4j = true

		runs {
			testmodClient {
				client()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Client"
				source sourceSets.testmodClient
			}
			testmodServer {
				server()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Server"
				source sourceSets.testmod
			}
		}
	}

	allprojects.each { p ->
		if (project.name == "deprecated") {
			return
		}

		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
			sourceSet p.sourceSets.client
		}

		loom.mods.register(p.name + "-testmod") {
			sourceSet p.sourceSets.testmod
			sourceSet p.sourceSets.testmodClient
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
		mappings "net.fabricmc:yarn:${rootProject.minecraft_version}${project.yarn_version}:v2"
		modApi "org.quiltmc:quilt-loader:$project.loader_version"

		testmodImplementation sourceSets.main.output
		testmodClientImplementation sourceSets.main.output
		testmodClientImplementation sourceSets.client.output
		testmodClientImplementation sourceSets.testmod.output

		testImplementation "org.quiltmc:quilt-loader-junit:$project.loader_version"
		testImplementation sourceSets.testmodClient.output
	}

	test {
		useJUnitPlatform()

		afterEvaluate {
			// See: https://github.com/FabricMC/fabric-loader/pull/585
			def classPathGroups = loom.mods.stream()
					.map { modSettings ->
						SourceSetHelper.getClasspath(modSettings, getProject()).stream()
								.map(File.&getAbsolutePath)
								.collect(Collectors.joining(File.pathSeparator))
					}
					.collect(Collectors.joining(File.pathSeparator+File.pathSeparator))

			systemProperty("fabric.classPathGroups", classPathGroups)
		}
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version
		inputs.property "upstream_version", project.upstream_version

		filesMatching(["fabric.mod.json", "quilt.mod.json"]) {
			expand "version": project.version, "upstream_version": project.upstream_version
		}
	}

	license {
		rule rootProject.file('codeformat/FABRIC_MODIFIED_HEADER')
		rule rootProject.file('codeformat/HEADER')

		include '**/*.java'
	}

	checkstyle {
		configFile = rootProject.file("codeformat/checkstyle.xml")
		toolVersion = "10.11.0"
	}

	tasks.withType(AbstractArchiveTask).configureEach {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	if (signingEnabled) {
		remoteSign {
			sign remapJar
		}
	}

	// Run this task after updating minecraft to regenerate any required resources
	tasks.register('generateResources') {
		group = "fabric"
	}

	tasks.register('testmodJar', Jar) {
		from sourceSets.testmod.output
		from sourceSets.testmodClient.output
		destinationDirectory = new File(project.buildDir, "devlibs")
		archiveClassifier = "testmod"
	}

	[jar, sourcesJar].each {
		it.from(rootProject.file("LICENSE")) {
			rename { "${it}-${project.base.archivesName.get()}"}
		}
	}

	if (file("src/client").exists() && !file("src/main").exists()) {
		remapJar {
			additionalClientOnlyEntries.add("LICENSE-${project.base.archivesName.get()}")
		}

		remapSourcesJar {
			additionalClientOnlyEntries.add("LICENSE-${project.base.archivesName.get()}")
		}
	}

	tasks.register('remapTestmodJar', net.fabricmc.loom.task.RemapJarTask) {
		dependsOn testmodJar
		input = testmodJar.archiveFile
		archiveClassifier = "testmod"
		addNestedDependencies = false
		includesClientOnlyClasses = true
		clientOnlySourceSetName = sourceSets.testmodClient.name
	}
	build.dependsOn remapTestmodJar

	tasks.register('validateMixinNames', net.fabricmc.loom.task.ValidateMixinNameTask) {
		source(sourceSets.main.output)
		source(sourceSets.client.output)
		source(sourceSets.testmod.output)
	}

	// Apply to each valid subproject.
	apply from: rootProject.file('gradle/package-info.gradle')
	apply from: rootProject.file('gradle/validate-annotations.gradle')
}

remapTestmodJar {
	def testModJarTasks = []

	subprojects {
		if (it.name == "deprecated" || !(it.file("src/testmod").exists() || it.file("src/testmodClient").exists())) {
			return
		}

		testModJarTasks += it.tasks.remapTestmodJar
	}

	nestedJars.setFrom(testModJarTasks)
	addNestedDependencies = true
	clientOnlySourceSetName = sourceSets.testmodClient.name
}

// Apply auxiliary buildscripts to submodules
// This must be done after all plugins are applied to subprojects
apply from: "gradle/module-validation.gradle"

loom {
	// Required as the item-group API uses access widened classes in its API, without this the javadoc generation fails.
	accessWidenerPath = file('fabric-item-group-api-v1/src/main/resources/quilted_fabric_item_group_api_v1.accesswidener')
}

javadoc {
	options {
		source = "17"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				"https://maven.fabricmc.net/docs/yarn-${rootProject.minecraft_version}${project.yarn_version}/"
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")

		tags(
				'apiNote:a:API Note:',
				'implSpec:a:Implementation Requirements:',
				'implNote:a:Implementation Note:'
		)
	}

	allprojects.each {
		if (it.name == "deprecated") {
			return
		}

		source(it.sourceSets.main.allJava)
		source(it.sourceSets.client.allJava)
	}

	classpath = files(sourceSets.main.compileClasspath, sourceSets.client.compileClasspath)
	include("**/api/**")
	failOnError true
}

tasks.register('javadocJar', Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
	archiveClassifier = "fatjavadoc"
}

build.dependsOn javadocJar

loom {
	runs {
		gametest {
			inherit testmodServer

			name "Game Test"

			// Enable the gametest runner
			property "fabric-api.gametest"
			property "fabric-api.gametest.report-file=${project.buildDir}/junit.xml"
			runDir "build/gametest"
		}
		autoTestServer {
			inherit testmodServer
			name "Auto Test Server"
			vmArg "-Dfabric.autoTest"
		}
		autoTestClient {
			inherit testmodClient
			name "Auto Test Client"
			vmArg "-Dfabric.autoTest"
		}
	}
}
// test.dependsOn runGametest

configurations {
	productionRuntime {
		extendsFrom configurations.minecraftLibraries
		extendsFrom configurations.loaderLibraries
		extendsFrom configurations.minecraftRuntimeLibraries
	}
	productionRuntimeServer
}

dependencies {
	productionRuntime "net.fabricmc:fabric-loader:${project.loader_version}"
	productionRuntime "net.fabricmc:intermediary:${project.minecraft_version}"

	productionRuntimeServer "net.fabricmc:fabric-installer:${project.installer_version}:server"
}

import net.fabricmc.loom.util.Platform

/*
// This is very far beyond loom's API if you copy this, you're on your own.
tasks.register('runProductionAutoTestClient', JavaExec) {
	dependsOn remapJar, remapTestmodJar, downloadAssets
	classpath.from configurations.productionRuntime
	mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
	workingDir = file("run")

	doFirst {
		classpath.from loom.minecraftProvider.minecraftClientJar
		workingDir.mkdirs()

		args(
				"--assetIndex", loom.minecraftProvider.versionInfo.assetIndex().fabricId(loom.minecraftProvider.minecraftVersion()),
				"--assetsDir", new File(loom.files.userCache, "assets").absolutePath,
				"--gameDir", workingDir.absolutePath
				)

		if (Platform.CURRENT.operatingSystem.isMacOS()) {
			jvmArgs(
					"-XstartOnFirstThread"
					)
		}

		jvmArgs(
				"-Dfabric.addMods=${remapJar.archiveFile.get().asFile.absolutePath}${File.pathSeparator}${remapTestmodJar.archiveFile.get().asFile.absolutePath}",
				"-Dfabric.autoTest"
				)
	}
}

tasks.register('serverPropertiesJar', Jar) {
	def propsFile = file("build/tmp/install.properties")

	doFirst {
		propsFile.text = """\
						fabric-loader-version=${project.loader_version}
						game-version=${project.minecraft_version}
						""".stripMargin().stripIndent()
	}

	archiveFileName = "test-server-properties.jar"
	destinationDirectory = file("build/tmp")
	from(propsFile)
}

tasks.register('runProductionAutoTestServer', JavaExec) {
	dependsOn remapJar, remapTestmodJar, serverPropertiesJar
	classpath.from configurations.productionRuntimeServer, serverPropertiesJar
	mainClass = "net.fabricmc.installer.ServerLauncher"
	workingDir = file("run")

	doFirst {
		workingDir.mkdirs()

		jvmArgs(
				"-Dfabric.addMods=${remapJar.archiveFile.get().asFile.absolutePath}${File.pathSeparator}${remapTestmodJar.archiveFile.get().asFile.absolutePath}",
				"-Dfabric.autoTest"
				)

		args("nogui")
	}
}
*/

// Format all the gradle files
//spotless {
//	groovyGradle {
//		target 'src/**/*.gradle', '*.gradle', 'gradle/*.gradle'
//		greclipse()
//	}
//}

def addPomMetadataInformation(Project project, MavenPom pom) {
	def modJsonFile = project.file("src/main/resources/quilt.mod.json")

	if (!modJsonFile.exists()) {
		modJsonFile = project.file("src/client/resources/quilt.mod.json")
	}

	def modJson = new JsonSlurper().parse(modJsonFile)
	pom.name = modJson.quilt_loader.metadata.name
	pom.url = "https://github.com/QuiltMC/quilted-fabric-api/tree/HEAD/${project.rootDir.relativePath(project.projectDir)}"
	pom.description = modJson.quilt_loader.metadata.description
	pom.licenses {
		license {
			name = "Apache-2.0"
			url = "https://github.com/QuiltMC/quilted-fabric-api/blob/HEAD/LICENSE"
		}
	}
	pom.developers {
		developer {
			name = "The Quilt Project"
			url = "https://quiltmc.org/"
		}
	}
	pom.scm {
		connection = "scm:git:https://github.com/QuiltMC/quilted-fabric-api.git"
		url = "https://github.com/QuiltMC/quilted-fabric-api"
		developerConnection = "scm:git:git@github.com:QuiltMC/quilted-fabric-api.git"
	}
	pom.issueManagement {
		system = "GitHub"
		url = "https://github.com/QuiltMC/quilted-fabric-api/issues"
	}
}

subprojects {
	if (it.name == 'deprecated') {
		return
	}

	dependencies {
		testmodImplementation sourceSets.main.output

		// Make all modules depend on the gametest api (and thus res loader) to try and promote its usage.
		if (project.name != "fabric-gametest-api-v1") {
			testmodImplementation project(path: ':fabric-gametest-api-v1', configuration: 'namedElements')
			testmodClientImplementation project(":fabric-gametest-api-v1").sourceSets.client.output
			testmodImplementation project(path: ':fabric-resource-loader-v0', configuration: 'namedElements')
			testmodClientImplementation project(":fabric-resource-loader-v0").sourceSets.client.output
		}

		// Make all testmods run with registry-sync-v0 as it is required to register new objects.
		if (project.name != "fabric-registry-sync-v0") {
			testmodRuntimeOnly project(path: ':fabric-registry-sync-v0', configuration: 'namedElements')
			testmodClientImplementation project(":fabric-registry-sync-v0").sourceSets.client.output
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				pom {
					addPomMetadataInformation(project, pom)
				}
				artifact(signingEnabled ? signRemapJar.output : remapJar) {
					builtBy(signingEnabled ? signRemapJar : remapJar)
				}

				artifact(remapSourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}
	}

	// We manually handle the pom generation
	loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

	javadoc.enabled = false
}

machete {
	// JSON minification isn't effective on this scale and sacrifices readability
	json.enabled = false
	finalizeAfter = ""
	ignoredTasks.add("jar")
	additionalTasks.add("remapJar")
}
if (signingEnabled) {
	tasks.signRemapJar.finalizedBy('optimizeOutputsOfRemapJar')
} else {
	tasks.remapJar.finalizedBy('optimizeOutputsOfRemapJar')
}

tasks.register('optimizedJar') {
	dependsOn 'optimizeOutputsOfRemapJar'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(signingEnabled ? signRemapJar.output : remapJar) {
				builtBy(tasks.named('optimizedJar'))
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifact javadocJar
			artifact remapTestmodJar

			pom {
				addPomMetadataInformation(rootProject, pom)
			}

			pom.withXml {
				def depsNode = asNode().appendNode("dependencies")
				getAllQslModules().forEach {
					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.getModuleGroup())
					depNode.appendNode("artifactId", it.getModuleName())
					depNode.appendNode("version", it.getModuleVersion())
					depNode.appendNode("scope", "compile")
				}
				subprojects.each {
					// Dont depend on the deprecated modules in the main artifact.
					if (it.path.startsWith(":deprecated")) {
						return
					}

					def depNode = depsNode.appendNode("dependency")
					depNode.appendNode("groupId", it.group)
					depNode.appendNode("artifactId", it.name)
					depNode.appendNode("version", it.version)
					depNode.appendNode("scope", "compile")
				}
			}
		}
	}
}

// Required until the deprecation is removed. Fabric API's main jar that is published to maven does not contain sub modules.
loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	if (ENV.MAVEN_URL) {
		repositories.maven {
			url ENV.MAVEN_URL
			if (ENV.MAVEN_USERNAME) {
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	} else if (ENV.SNAPSHOTS_URL) {
		repositories.maven {
			url ENV.SNAPSHOTS_URL
			credentials {
				username ENV.SNAPSHOTS_USERNAME
				password ENV.SNAPSHOTS_PASSWORD
			}
		}
	} else {
		repositories.mavenLocal()
	}
}

subprojects.each {
	if (it.name == "deprecated") {
		return
	}

	remapJar.dependsOn("${it.path}:remapJar")
}

// These modules are not included in the fat jar, maven will resolve them via the pom.
def devOnlyModules = [
		"fabric-gametest-api-v1",
]

configurations {
	qsl
}

dependencies {
	// Bundle all QSL modules
	qsl modApi("org.quiltmc:qsl:${project.qsl_version}")
	afterEvaluate {
		getAllQslModules().forEach {
			include "$it.moduleGroup:$it.moduleName:$it.moduleVersion"
		}
		subprojects.each {
			if (it.name == "deprecated") {
				return
			}

			api project(path: "${it.path}", configuration: "namedElements")
			clientImplementation project("${it.path}:").sourceSets.client.output

			testmodImplementation project("${it.path}:").sourceSets.testmod.output
			testmodClientImplementation project("${it.path}:").sourceSets.testmodClient.output
		}
	}
}

java.util.stream.Stream<ResolvedDependency> getAllQslModules() {
// "it" is QSL
	return configurations.named('qsl').get().resolvedConfiguration.firstLevelModuleDependencies.stream().flatMap {
		it.children.stream()
	}.flatMap {
		// "it" is each QSL library
		it.children.stream()
	}.filter {
		// "it" is each QSL module
		// this should only be QSL modules, but it can't hurt to filter out
		if (it.moduleGroup.startsWith('org.quiltmc.qsl') && it.moduleGroup.split('\\.').length == 4) {
			return true
		} else {
			throw RuntimeException("Unexpected dependency: $it")
		}
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			if (it.name in devOnlyModules || it.name == "deprecated") {
				return
			}

			// Include the signed or none signed jar from the sub project.
			nestedJars.from project("${it.path}").tasks.getByName(signingEnabled ? "signRemapJar" : "remapJar")
		}
	}
}

tasks.register('renameJar', Jar) {
	dependsOn 'optimizedJar'

	with remapJar
	from zipTree(remapJar.archiveFile)
	def qsl_version_normalized = project.qsl_version.substring(0, project.qsl_version.indexOf('+'))
	def qfapi_version_normalized = project.version.substring(0, project.version.indexOf('+'))
	def upstream_fapi_version_normalized = project.upstream_version
	archiveFileName.set("qfapi-${qfapi_version_normalized}_qsl-${qsl_version_normalized}_fapi-${upstream_fapi_version_normalized}_mc-${project.minecraft_version}.jar")
}

curseforge {
	if (ENV.CURSEFORGE_TOKEN) {
		apiKey = ENV.CURSEFORGE_TOKEN
	}

	project {
		id = '634179'
		changelog = ENV.CHANGELOG ?: 'No changelog provided'
		releaseType = project.prerelease == 'true' ? 'beta' : 'release'
		addGameVersion '1.20.1'
		addGameVersion '1.20'
		addGameVersion 'Quilt'

		mainArtifact(renameJar) {
			displayName = "[$project.minecraft_version] QFAPI " + project.version.split('\\+')[0] + " and QSL " + project.qsl_version.split('\\+')[0]
		}

		afterEvaluate {
			uploadTask.dependsOn('renameJar')
		}
	}

	options {
		forgeGradleIntegration = false
	}
}
tasks.curseforge.dependsOn renameJar
tasks.build.dependsOn optimizedJar

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

import java.util.stream.Collectors

tasks.register('github') {
	dependsOn renameJar
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("[$project.minecraft_version] QFAPI " + project.version.split('\\+')[0] + " and QSL " + project.qsl_version.split('\\+')[0])
		releaseBuilder.body("Provides Fabric API ${project.upstream_version}\n" + ENV.CHANGELOG ?: "No changelog provided")
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(project.prerelease == 'true')

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(renameJar.archiveFile.get().getAsFile(), 'application/java-archive');
	}
}

modrinth {
	projectId = 'qsl'
	versionName = "[$project.minecraft_version] QFAPI " + project.version.split('\\+')[0] + " and QSL " + project.qsl_version.split('\\+')[0]
	versionType = project.prerelease == "true" ? "beta" : "release"
	changelog = "Provides Fabric API $project.upstream_version\n" + (ENV.CHANGELOG ?: "No changelog provided")
	dependencies {
		embedded.project 'fabric-api'
	}

	file = signingEnabled ? signRemapJar.output : renameJar.archiveFile
}

tasks.modrinth.dependsOn renameJar

// A task to ensure that the version being released has not already been released.
def checkVersion = tasks.register('checkVersion') {
	doFirst {
		def xml = new URL('https://maven.quiltmc.org/repository/release/org/quiltmc/quilted-fabric-api/quilted-fabric-api/maven-metadata.xml').text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text()
		if (versions.contains(version)) {
			throw new RuntimeException("$version has already been released!")
		}
	}
}

github.mustRunAfter checkVersion
project.tasks.modrinth.mustRunAfter checkVersion
publish.dependsOn checkVersion
project.tasks.curseforge.mustRunAfter checkVersion
